package com.aman.project.security;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationProvider;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;

import com.aman.project.service.MyAppUserService;

@Configuration
@EnableWebSecurity
public class SecurityConfig {
	
	@Autowired
	MyAppUserService myAppUserService;

    @Bean
    UserDetailsService userDetailsService() {
		return myAppUserService;
		
	}
    @Bean
    PasswordEncoder passwordEncoder() {
    	return new BCryptPasswordEncoder();
    }
    
    @Bean
    AuthenticationProvider authenticationProvider() {
    	DaoAuthenticationProvider provider = new DaoAuthenticationProvider();
    	provider.setUserDetailsService(myAppUserService);
    	return provider;
    			
    }
	
    @Bean
    SecurityFilterChain securityFilterChain(HttpSecurity httpSecurity) throws Exception{
		return httpSecurity
				.csrf(AbstractHttpConfigurer::disable)
				.formLogin(httpForm-> {
					httpForm
					.loginPage("/login").permitAll();
				})
				
				.authorizeHttpRequests(registry -> {
					registry.requestMatchers("/req/signup", "/css/**", "/js/**").permitAll();
					registry.anyRequest().authenticated();
				})
				.build();
	}  
	
	
}
